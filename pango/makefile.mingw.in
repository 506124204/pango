TOP = ../..

include $(TOP)/build/win32/make.mingw

# Possibly override Pango version from build/win32/module.defs
PANGO_VER = @VERSION@

OPTIMIZE = -g -Wall

INCLUDES = -I .. -I .
DEFINES = -DPANGO_VERSION=\"$(PANGO_VER)\"
DEPCFLAGS = $(GLIB_CFLAGS) $(LIBICONV_CFLAGS) $(FREETYPE2_CFLAGS)

pango_built_headers= pango-enum-types.h
pango_built_cfiles= pango-enum-types.c

BUILT_SOURCES=$(pango_built_headers) $(pango_built_cfiles)

all :						\
	../config.h				\
	$(BUILT_SOURCES)			\
	pango-$(PANGO_VER).dll			\
	pangowin32-$(PANGO_VER).dll		\
	pangoft2-$(PANGO_VER).dll		\
	pango-querymodules.exe

PANGO_OBJS =					\
	break.o					\
	fonts.o					\
	glyphstring.o				\
	mapping.o				\
	modules.o				\
	pango-attributes.o			\
	pango-context.o				\
	pango-coverage.o			\
	pango-enum-types.o			\
	pango-fontmap.o				\
	pango-intset.o				\
	pango-item.o				\
	pango-layout.o				\
	pango-markup.o				\
	pango-tabs.o				\
	pango-utils.o				\
	reorder-items.o				\
	shape.o

PANGOWIN32_OBJS =				\
	module-defs-win32.o			\
	pangowin32.o				\
	pangowin32-fontcache.o			\
	pangowin32-fontmap.o

PANGOFT2_OBJS =					\
	module-defs-ft2.o			\
	pangoft2.o				\
	pangoft2-fontcache.o			\
	pangoft2-fontmap.o

PANGO_QUERYMODULES_OBJS =			\
	querymodules.o

pango_headers=		   \
	pango.h		   \
	pango-attributes.h \
	pango-break.h	   \
	pango-context.h	   \
	pango-coverage.h   \
	pango-engine.h	   \
	pango-font.h       \
	pango-fontmap.h	   \
	pango-glyph.h	   \
	pango-indic.h	   \
	pango-item.h	   \
	pango-layout.h	   \
	pango-modules.h	   \
	pango-tabs.h	   \
	pango-types.h	   \
	pango-utils.h

../config.h : ../config.h.win32
	cp $< $@

module-defs-win32.c : module-defs-win32.c.win32
	cp $< $@

module-defs-ft2.c : module-defs-ft2.c.win32
	cp $< $@

pango-$(PANGO_VER).dll : $(PANGO_OBJS) pango.def
	$(GLIB)/build-dll pango $(PANGO_VER) pango.def $(OPTIMIZE) $(PANGO_OBJS) -L mini-fribidi -lmini-fribidi $(GLIB_LIBS) $(LIBICONV_LIBS)

pangowin32-$(PANGO_VER).dll : $(PANGOWIN32_OBJS) pangowin32.def
	$(GLIB)/build-dll pangowin32 $(PANGO_VER) pangowin32.def $(OPTIMIZE) $(PANGOWIN32_OBJS) -L . -lpango-$(PANGO_VER) $(GLIB_LIBS) -lgdi32

pangoft2-$(PANGO_VER).dll : $(PANGOFT2_OBJS) pangoft2.def
	$(GLIB)/build-dll pangoft2 $(PANGO_VER) pangoft2.def $(OPTIMIZE) $(PANGOFT2_OBJS) -L . -lpango-$(PANGO_VER) $(GLIB_LIBS) $(FREETYPE2_LIBS) -lgdi32

pango-querymodules.exe : $(PANGO_QUERYMODULES_OBJS) pango-$(PANGO_VER).dll
	$(CC) -o $@ $(PANGO_QUERYMODULES_OBJS) -L . -lpango-$(PANGO_VER) $(GLIB_LIBS)

pango-enum-types.h: $(pango_headers) makeenums.pl
	perl makeenums.pl include $(pango_headers) > pango-enum-types.h

pango-enum-types.c: $(pango_headers) makeenums.pl
	perl makeenums.pl cfile $(pango_headers) > pango-enum-types.c

test1.exe : test1.o pango-$(PANGO_VER).dll pangowin32-$(PANGO_VER).dll
	$(CC) -o $@ $(CFLAGS) test1.o -L . -lpango-$(PANGO_VER) -lpangowin32-$(PANGO_VER) $(GLIB_LIBS) -lgdi32

test2.exe : test2.o
	$(CC) -o $@ $(CFLAGS) test2.o -lgdi32

test3.exe : test3.o
	$(CC) -o $@ $(CFLAGS) test3.o -lgdi32

test4.exe : test4.o pango-$(PANGO_VER).dll pangowin32-$(PANGO_VER).dll
	$(CC) -o $@ $(CFLAGS) test4.o -L . -lpango-$(PANGO_VER) -lpangowin32-$(PANGO_VER) $(GLIB_LIBS)

test5.exe : test5.o
	$(CC) -o $@ $(CFLAGS) test5.o -lgdi32

ifeq ($(wildcard makefile.mingw.in),makefile.mingw.in)
# Hack to get an updated makefile.mingw automatically after updating
# makefile.mingw.in. Only for developer use.
makefile.mingw: makefile.mingw.in
	sed -e 's,@VER[S]ION@,@VERSION@,' <$< >$@
endif
