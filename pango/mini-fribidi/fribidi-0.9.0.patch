--- /home/otaylor/fribidi-0.9.0/fribidi.c	Wed Mar 28 01:55:42 2001
+++ ./fribidi.c	Fri Apr 13 14:26:35 2001
@@ -20,9 +20,13 @@
  * For licensing issues, contact <dov@imagic.weizmann.ac.il> and
  * <fwpg@sharif.edu>.
  */
- 
-#include "fribidi.h"
-#include "config.h"
+
+#include <glib.h>
+#include "pango/pango-utils.h"
+#include "fribidi_types.h"
+
+#undef DEBUG
+
 #ifdef DEBUG
 #include <stdio.h>
 #endif
@@ -87,6 +91,7 @@
 #endif
 }
 
+#ifdef DEBUG
 static gint
 bidi_string_strlen (FriBidiChar * str)
 {
@@ -97,30 +102,7 @@
 
   return len;
 }
-
-static void
-bidi_string_reverse (FriBidiChar * str, gint len)
-{
-  gint i;
-  for (i = 0; i < len / 2; i++)
-    {
-      FriBidiChar tmp = str[i];
-      str[i] = str[len - 1 - i];
-      str[len - 1 - i] = tmp;
-    }
-}
-
-static void
-index_array_reverse (FriBidiStrIndex * arr, gint len)
-{
-  gint i;
-  for (i = 0; i < len / 2; i++)
-    {
-      FriBidiStrIndex tmp = arr[i];
-      arr[i] = arr[len - 1 - i];
-      arr[len - 1 - i] = tmp;
-    }
-}
+#endif
 
 #ifndef USE_SIMPLE_MALLOC
 static TypeLink *free_type_links = NULL;
@@ -231,7 +213,7 @@
    codes that are removed from rl_list, to reinsert them later by calling
    the override_list.
 */
-static void *
+static void
 init_list (TypeLink ** start, TypeLink ** end)
 {
   TypeLink *list = NULL;
@@ -601,7 +583,7 @@
   fprintf (stderr, "Org. types : ");
   for (i = 0; i < bidi_string_strlen (str); i++)
     fprintf (stderr, "%c",
-	     fribidi_char_from_type (fribidi_get_type (str[i])));
+	     fribidi_char_from_type (_pango_fribidi_get_type (str[i])));
   fprintf (stderr, "\n");
 }
 #endif
@@ -626,7 +608,7 @@
   /* Determinate character types */
   char_type = g_new (FriBidiCharType, len);
   for (i = 0; i < len; i++)
-    char_type[i] = fribidi_get_type (str[i]);
+    char_type[i] = _pango_fribidi_get_type (str[i]);
 
   /* Run length encode the character types */
   type_rl_list = run_length_encode_types (char_type, len);
@@ -812,7 +794,7 @@
 	    /* Resolving dependency of loops for rules W1 and W2, so we
 	       can merge them in one loop. */
 	    if (next_type == FRIBIDI_TYPE_NSM)
-	      RL_TYPE (pp->next) == FRIBIDI_TYPE_AN;
+	      RL_TYPE (pp->next) = FRIBIDI_TYPE_AN;
 	  }
       }
 
@@ -1004,7 +986,7 @@
     pos = len - 1;
     for (j = len - 1; j >= 0; j--)
       {
-	k = fribidi_get_type (str[j]);
+	k = _pango_fribidi_get_type (str[j]);
 	if (!state && FRIBIDI_IS_SEPARATOR (k))
 	  {
 	    state = 1;
@@ -1054,7 +1036,7 @@
 {
 
   TypeLink *p, *pp;
-  if (!pp)
+  if (!type_rl_list)
     return;
 #ifdef USE_SIMPLE_MALLOC
   for (pp = type_rl_list; pp; pp = pp->next)
@@ -1089,169 +1071,28 @@
 //----------------------------------------------------------------------*/
 
 /*======================================================================
-//  fribidi_remove_explicits() removes explicit marks, and returns the
-//  new length.
-//----------------------------------------------------------------------*/
-gint fribidi_remove_explicits (FriBidiChar * str, gint length)
-{
-  gint i, j;
-
-  j = 0;
-  for (i = 0; i < length; i++)
-    if (!FRIBIDI_IS_EXPLICIT (fribidi_get_type (str[i])))
-      str[j++] = str[i];
-
-  return j;
-}
-
-/*======================================================================
-//  fribidi_log2vis() calls the function_analyse_string() and then
-//  does reordering and fills in the output strings.
-//----------------------------------------------------------------------*/
-void
-fribidi_log2vis (		/* input */
-		  FriBidiChar * str, gint len, FriBidiCharType * pbase_dir,
-		  /* output */
-		  FriBidiChar * visual_str,
-		  FriBidiStrIndex * position_L_to_V_list,
-		  FriBidiStrIndex * position_V_to_L_list,
-		  guint8 * embedding_level_list)
-{
-  TypeLink *type_rl_list, *pp = NULL;
-  gint max_level;
-  gboolean private_V_to_L = FALSE;
-
-  if (len == 0)
-    return;
-
-  /* If l2v is to be calculated we must have l2v as well. If it is not
-     given by the caller, we have to make a private instance of it. */
-  if (position_L_to_V_list && !position_V_to_L_list)
-    {
-      private_V_to_L = TRUE;
-      position_V_to_L_list = g_new (FriBidiStrIndex, len + 1);
-    }
-
-  if (len > FRIBIDI_MAX_STRING_LENGTH && position_V_to_L_list)
-    {
-#ifdef DEBUG
-      fprintf (stderr, "%s: cannot handle strings > %d characters\n",
-	       PACKAGE, FRIBIDI_MAX_STRING_LENGTH);
-#endif
-      return;
-    }
-  fribidi_analyse_string (str, len, pbase_dir,
-			  /* output */
-			  &type_rl_list, &max_level);
-
-  /* 7. Reordering resolved levels */
-  DBG ("Reordering resolved levels.\n");
-  {
-    gint level_idx;
-    gint i, j;
-
-    /* TBD: L3 */
-
-    /* Set up the ordering array to sorted order */
-    if (position_V_to_L_list)
-      for (i = 0; i < len + 1; i++)
-	position_V_to_L_list[i] = i;
-    /* Copy the logical string to the visual */
-    if (visual_str)
-      for (i = 0; i < len + 1; i++)
-	visual_str[i] = str[i];
-
-    /* Assign the embedding level array */
-    if (embedding_level_list)
-      for (pp = type_rl_list->next; pp->next; pp = pp->next)
-	{
-	  gint i;
-	  gint pos = RL_POS (pp);
-	  gint len = RL_LEN (pp);
-	  gint level = RL_LEVEL (pp);
-	  for (i = 0; i < len; i++)
-	    embedding_level_list[pos + i] = level;
-	}
-
-    /* Reorder both the outstring and the order array */
-    if (visual_str || position_V_to_L_list)
-      {
-
-	if (mirroring && visual_str)
-	  /* L4. Mirror all characters that are in odd levels and have mirrors. */
-	  for (pp = type_rl_list->next; pp->next; pp = pp->next)
-	    {
-	      if (RL_LEVEL (pp) & 1)
-		{
-		  gint i;
-		  for (i = RL_POS (pp); i < RL_POS (pp) + RL_LEN (pp); i++)
-		    {
-		      FriBidiChar mirrored_ch;
-		      if (fribidi_get_mirror_char
-			  (visual_str[i], &mirrored_ch))
-			visual_str[i] = mirrored_ch;
-		    }
-		}
-	    }
-
-	/* L2. Reorder. */
-	for (level_idx = max_level; level_idx > 0; level_idx--)
-	  {
-	    for (pp = type_rl_list->next; pp->next; pp = pp->next)
-	      {
-		if (RL_LEVEL (pp) >= level_idx)
-		  {
-		    /* Find all stretches that are >= level_idx */
-		    gint len = RL_LEN (pp);
-		    gint pos = RL_POS (pp);
-		    TypeLink *pp1 = pp->next;
-		    while (pp1->next && RL_LEVEL (pp1) >= level_idx)
-		      {
-			len += RL_LEN (pp1);
-			pp1 = pp1->next;
-		      }
-		    pp = pp1->prev;
-		    if (visual_str)
-		      bidi_string_reverse (visual_str + pos, len);
-		    if (position_V_to_L_list)
-		      index_array_reverse (position_V_to_L_list + pos, len);
-		  }
-	      }
-	  }
-      }
-
-    /* Convert the v2l list to l2v */
-    if (position_L_to_V_list)
-      for (i = 0; i < len; i++)
-	position_L_to_V_list[position_V_to_L_list[i]] = i;
-  }
-
-  if (private_V_to_L)
-    g_free (position_V_to_L_list);
-
-  free_rl_list (type_rl_list);
-
-}
-
-/*======================================================================
 //  fribidi_embedding_levels() is used in order to just get the
 //  embedding levels.
 //----------------------------------------------------------------------*/
 void
-fribidi_log2vis_get_embedding_levels (
+pango_log2vis_get_embedding_levels (
 				       /* input */
-				       FriBidiChar * str,
-				       gint len, FriBidiCharType * pbase_dir,
+				       gunichar * str,
+				       int len,
+				       PangoDirection *pbase_dir,
 				       /* output */
 				       guint8 * embedding_level_list)
 {
   TypeLink *type_rl_list, *pp;
   gint max_level;
-
-  if (len = 0)
+  FriBidiCharType fribidi_base_dir;
+ 
+  fribidi_base_dir = (*pbase_dir == PANGO_DIRECTION_LTR) ? FRIBIDI_TYPE_L : FRIBIDI_TYPE_R;
+    
+  if (len == 0)
     return;
 
-  fribidi_analyse_string (str, len, pbase_dir,
+  fribidi_analyse_string (str, len, &fribidi_base_dir,
 			  /* output */
 			  &type_rl_list, &max_level);
 
@@ -1266,28 +1107,6 @@
     }
 
   free_rl_list (type_rl_list);
+   
+  *pbase_dir = (fribidi_base_dir == FRIBIDI_TYPE_L) ?  PANGO_DIRECTION_LTR : PANGO_DIRECTION_RTL;
 }
-
-guchar *fribidi_version_info =
-  "Copyright (C) 2001 FriBidi Project.\n"
-  PACKAGE " comes with NO WARRANTY, to the extent permitted by law.\n"
-  "You may redistribute copies of " PACKAGE " under the terms of\n"
-  "the GNU General Public License.\n"
-  "For more information about these matters, see the files named COPYING.\n"
-#if (defined(MEM_OPTIMIZED) || defined(DEBUG) || defined(USE_SIMPLE_MALLOC) \
-    || defined(FRIBIDI_USE_MINI_GLIB))
-  "This " PACKAGE " is compiled with following options:\n"
-#if (defined(MEM_OPTIMIZED))
-  "MEM_OPTIMIZED\n"
-#endif
-#if (defined(DEBUG))
-  "DEBUG\n"
-#endif
-#if (defined(USE_SIMPLE_MALLOC))
-  "USE_SIMPLE_MALLOC\n"
-#endif
-#if (defined(FRIBIDI_USE_MINI_GLIB))
-  "FRIBIDI_USE_MINI_GLIB\n"
-#endif
-#endif
- ;
--- /home/otaylor/fribidi-0.9.0/fribidi_get_type.c	Wed Mar 28 01:55:42 2001
+++ ./fribidi_get_type.c	Fri Apr 13 14:15:44 2001
@@ -23,7 +23,9 @@
 
 #include <stdio.h>
 #include <stdlib.h>
-#include "fribidi.h"
+#include <glib.h>
+#include "pango/pango-utils.h"
+#include "fribidi_types.h"
 #include "fribidi_tables.i"
 
 #ifdef MEM_OPTIMIZED
@@ -34,7 +36,7 @@
 //  fribidi_get_type() returns the bidi type of a character.
 //----------------------------------------------------------------------*/
 FriBidiCharType
-fribidi_get_type (FriBidiChar uch)
+_pango_fribidi_get_type(FriBidiChar uch)
 {
   int i = uch % 256, j = uch / 256;
   FriBidiPropCharType *block = FriBidiPropertyBlocks[j];
@@ -80,7 +82,7 @@
     }
 }
 
-gboolean fribidi_get_mirror_char (	/* Input */
+gboolean pango_get_mirror_char (	/* Input */
 				   FriBidiChar ch,
 				   /* Output */
 				   FriBidiChar * mirrored_ch)
--- /home/otaylor/fribidi-0.9.0/fribidi_tables.i	Wed Mar 28 03:02:09 2001
+++ ./fribidi_tables.i	Fri Apr 13 14:22:07 2001
@@ -3,8 +3,6 @@
 //  and BidiMirroring.txt, version 1, by the perl script CreateGetType.pl.
 //----------------------------------------------------------------------*/
 
-#include "fribidi.h"
-
 #define WS FRIBIDI_PROP_TYPE_WS
 #define BS FRIBIDI_PROP_TYPE_BS
 #define EO FRIBIDI_PROP_TYPE_EO
--- /home/otaylor/fribidi-0.9.0/fribidi_types.h	Wed Mar 28 01:55:42 2001
+++ ./fribidi_types.h	Fri Apr 13 14:04:11 2001
@@ -281,4 +281,6 @@
 #define FRIBIDI_MAX_STRING_LENGTH 65535
 #endif
 
+FriBidiCharType _pango_fribidi_get_type(FriBidiChar uch);
+
 #endif
